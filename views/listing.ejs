<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><%= listing.title %> | Product Details</title>
    <link rel="stylesheet" href="/your-styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: #333;
        }
        .product-container {
            max-width: 1100px;
            margin: 30px auto;
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            padding: 30px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            animation: fadeIn 0.5s ease-in-out;
        }
        .image-slider {
            flex: 1;
            min-width: 300px;
            position: relative;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
            height: 400px;
        }
        #sliderImage {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
            transition: transform 0.5s ease;
        }
        .slider-buttons {
            position: absolute;
            top: 50%;
            width: 100%;
            display: flex;
            justify-content: space-between;
            padding: 0 15px;
            box-sizing: border-box;
            transform: translateY(-50%);
        }
        .slider-buttons button {
            background: rgba(255,255,255,0.8);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }
        .slider-buttons button:hover {
            background: rgba(255,255,255,1);
            transform: scale(1.1);
        }
        .slider-indicators {
            position: absolute;
            bottom: 15px;
            left: 0;
            right: 0;
            display: flex;
            justify-content: center;
            gap: 8px;
        }
        .indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: rgba(255,255,255,0.5);
            cursor: pointer;
            transition: all 0.3s;
        }
        .indicator.active {
            background: white;
            transform: scale(1.2);
        }
        .product-details {
            flex: 1;
            min-width: 300px;
        }
        .product-details h1 {
            margin-top: 0;
            color: #2c3e50;
            font-size: 28px;
            border-bottom: 2px solid #f0f0f0;
            padding-bottom: 10px;
        }
        .price {
            font-size: 28px;
            font-weight: 700;
            color: #27ae60;
            margin: 15px 0;
            display: inline-block;
            background: rgba(39, 174, 96, 0.1);
            padding: 5px 15px;
            border-radius: 4px;
        }
        .sold-badge {
            display: inline-block;
            background: #e74c3c;
            color: white;
            padding: 8px 15px;
            border-radius: 4px;
            font-weight: bold;
            margin: 10px 0;
            animation: pulse 2s infinite;
        }
        .description-card, .details-card, .similar-products {
            background: #f9f9f9;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            border-left: 4px solid #3498db;
        }
        .details-card h3, .description-card h3, .similar-products h3 {
            margin-top: 0;
            color: #2c3e50;
            font-size: 18px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .details-card h3 i, .description-card h3 i, .similar-products h3 i {
            color: #3498db;
        }
        .detail-row {
            margin: 10px 0;
            display: flex;
            align-items: center;
            font-size: 15px;
        }
        .detail-row strong {
            min-width: 120px;
            display: inline-block;
            color: #555;
        }
        .detail-row i {
            margin-right: 5px;
            color: #3498db;
        }
        .timestamp {
            color: #7f8c8d;
            font-size: 14px;
            margin-top: 10px;
            font-style: italic;
        }
        .seller-email {
            color: #7f8c8d;
            font-size: 14px;
        }
        .action-links {
            display: flex;
            gap: 15px;
            margin-top: 25px;
            flex-wrap: wrap;
        }
        .action-link {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 20px;
            text-decoration: none;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s;
            text-align: center;
            min-width: 150px;
        }
        .primary-link {
            background: #27ae60;
            color: white;
        }
        .primary-link:hover {
            background: #219653;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
        }
        .secondary-link {
            background: #e74c3c;
            color: white;
        }
        .secondary-link:hover {
            background: #c0392b;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }
        .tertiary-link {
            background: #f8f9fa;
            color: #333;
            border: 1px solid #ddd;
        }
        .tertiary-link:hover {
            background: #e9ecef;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .disabled-link {
            background: #95a5a6;
            color: white;
            cursor: not-allowed;
            pointer-events: none;
        }
        .secondary-link-active {
            background: #7f8c8d !important;
        }
        .view-more-link {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            color: #3498db;
            text-decoration: none;
            margin-top: 10px;
            font-weight: 500;
            transition: all 0.3s;
        }
        .view-more-link:hover {
            color: #2980b9;
            gap: 8px;
        }
        @media (max-width: 768px) {
            .product-container {
                flex-direction: column;
                padding: 20px;
            }
            .image-slider {
                height: 300px;
            }
            .action-links {
                flex-direction: column;
            }
            .action-link {
                width: 100%;
            }
        }
        
        /* Bookmark Notification Styles */
        .bookmark-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(39, 174, 96, 0.9);
            color: white;
            padding: 12px 20px;
            border-radius: 5px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            transition: all 0.3s ease;
            animation: slideIn 0.3s forwards;
        }
        
        .bookmark-notification.fade-out {
            opacity: 0;
            transform: translateY(20px);
        }
        
        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        /* Add to existing styles */
        .product-container {
            max-width: 1100px;
            width: 100%;
            margin: 30px auto;
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            padding: 30px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        }
        
        .image-slider {
            flex: 1;
            min-width: 300px;
            width: 100%;
        }
        
        .product-details {
            flex: 1;
            min-width: 300px;
            width: 100%;
        }
        
        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .product-container {
                padding: 15px;
                margin: 15px auto;
                gap: 20px;
            }
            
            .image-slider {
                height: 300px;
            }
            
            .product-details h1 {
                font-size: 1.5rem;
            }
            
            .price {
                font-size: 1.3rem;
            }
            
            .action-links {
                flex-direction: column;
            }
            
            .action-link {
                width: 100%;
                margin-bottom: 10px;
                justify-content: center;
            }
        }
        
        @media (max-width: 576px) {
            .product-container {
                padding: 10px;
            }
            
            .image-slider {
                height: 250px;
            }
            
            .detail-row strong {
                min-width: 100px;
            }
            
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }
            
            .form-group label {
                font-size: 0.9rem;
            }
            
            input[type="text"],
            input[type="tel"],
            textarea {
                font-size: 0.9rem;
            }
        }
        
        @media (max-width: 400px) {
            .image-slider {
                height: 220px;
            }
            
            .product-details h1 {
                font-size: 1.3rem;
            }
            
            .detail-row {
                flex-direction: column;
                align-items: flex-start;
                margin-bottom: 15px;
            }
            
            .detail-row strong {
                margin-bottom: 5px;
            }
        }
    </style>
</head>
<body>

<%- include('partials/header') %>

<div class="container">
    <div class="product-container">
        <!-- IMAGE SLIDER -->
        <div class="image-slider">
            <% if (listing.images && listing.images.length > 0) { %>
                <img id="sliderImage" src="<%= listing.images[0] %>" alt="Product Image">
                <div class="slider-buttons">
                    <button onclick="prevImage()"><i class="fas fa-chevron-left"></i></button>
                    <button onclick="nextImage()"><i class="fas fa-chevron-right"></i></button>
                </div>
                <div class="slider-indicators">
                    <% for(let i = 0; i < listing.images.length; i++) { %>
                        <span class="indicator <%= i === 0 ? 'active' : '' %>" onclick="showImage(<%= i %>)"></span>
                    <% } %>
                </div>
            <% } else { %>
                <img src="https://via.placeholder.com/400x300?text=No+Image" alt="No Image Available">
            <% } %>
        </div>

        <!-- DETAILS -->
        <div class="product-details">
            <h1><%= listing.title %></h1>
            <div class="price">₹<%= listing.price %></div>
            
            <% if (listing.isSold) { %>
                <div class="sold-badge"><i class="fas fa-tag"></i> SOLD</div>
            <% } %>
            
            <div class="description-card">
                <h3><i class="fas fa-align-left"></i> Description</h3>
                <p><%= listing.description %></p>
            </div>

            <div class="details-card">
                <h3><i class="fas fa-info-circle"></i> Details</h3>
                <div class="detail-row">
                    <strong><i class="fas fa-tag"></i> Category:</strong> <%= listing.category %>
                </div>
                <div class="detail-row">
                    <strong><i class="fas fa-map-marker-alt"></i> Location:</strong> <%= listing.location %>
                </div>
                <div class="detail-row">
                    <strong><i class="fas fa-user"></i> Posted By:</strong> <%= listing.postedBy?.fullname %> 
                    <span class="seller-email">(<%= listing.postedBy?.email %>)</span>
                </div>

                <div class="timestamp">
                    <i class="far fa-calendar-alt"></i> Posted on: <%= new Date(listing.createdAt).toLocaleDateString() %>
                </div>
            </div>

            <!-- Place Order and Bookmark Links -->
            <div class="action-links">
                <a href="" id="placeOrderBtn" 
                   class="action-link primary-link <%= listing.isSold ? 'disabled-link' : '' %>"
                   onclick="<%= !listing.isSold ? 'event.preventDefault(); placeOrder();' : '' %>">
                    <i class="fas fa-shopping-cart"></i> Place Order
                </a>
                <a href="#" id="bookmarkBtn" 
                   class="action-link secondary-link <%= typeof isBookmarked !== 'undefined' && isBookmarked ? 'secondary-link-active' : '' %>"
                   onclick="event.preventDefault(); bookmarkListing();">
                    <i class="<%= typeof isBookmarked !== 'undefined' && isBookmarked ? 'fas' : 'far' %> fa-bookmark"></i> 
                    <%= typeof isBookmarked !== 'undefined' && isBookmarked ? 'Bookmarked' : 'Bookmark' %>
                </a>
                <a href="/" class="action-link tertiary-link">
                    <i class="fas fa-arrow-left"></i> Back to Listings
                </a>
            </div>
            
            <!-- Similar Products -->
            <div class="similar-products">
                <h3><i class="fas fa-th-large"></i> Similar Products</h3>
                <p>Check out other items in this category.</p>
                <a href="/api/v1/category/<%= listing.category %>" class="view-more-link">
                    View More <i class="fas fa-arrow-right"></i>
                </a>
            </div>
        </div>
    </div>
</div>

<!-- ORDER FORM MODAL -->
<div id="orderFormModal" class="modal">
    <div class="modal-content">
        <span id="closeOrderModal" class="close-modal">&times;</span>
        <h2>Place Your Order</h2>
        <form id="orderForm">
            <input type="hidden" id="listingId" value="<%= listing._id %>">
            
            <div class="form-group">
                <label for="fullName">Full Name</label>
                <input type="text" id="fullName" name="name" required>
            </div>
            
            <div class="form-group">
                <label for="address">Delivery Address</label>
                <textarea id="address" name="address" required></textarea>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="city">City</label>
                    <input type="text" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label for="pincode">Pincode</label>
                    <input type="text" id="pincode" name="pincode" required pattern="[0-9]{6}" title="Please enter a valid 6-digit pincode">
                </div>
            </div>
            
            <div class="form-group">
                <label for="phone">Phone Number</label>
                <input type="tel" id="phone" name="phone" required pattern="[0-9]{10}" title="Please enter a valid 10-digit phone number">
            </div>
            
            <div class="form-group payment-options">
                <label>Payment Method:</label>
                <div class="payment-methods">
                    <div class="payment-method">
                        <input type="radio" id="paypal" name="paymentMethod" value="paypal" checked>
                        <label for="paypal">PayPal</label>
                    </div>
                </div>
            </div>
            
            <div class="order-summary">
                <h3>Order Summary</h3>
                <div class="summary-row">
                    <span>Product:</span>
                    <span><%= listing.title %></span>
                </div>
                <div class="summary-row">
                    <span>Price:</span>
                    <span class="price">₹<%= listing.price %></span>
                </div>
            </div>
            
            <button type="submit" class="submit-btn"><i class="fas fa-check-circle"></i> Confirm Order</button>
        </form>
    </div>
</div>

<!-- ORDER SUCCESS MODAL -->
<div id="orderSuccessModal" class="modal">
    <div class="modal-content success-modal">
        <span id="closeSuccessModal" class="close-modal">&times;</span>
        <div class="success-icon">
            <i class="fas fa-check-circle"></i>
        </div>
        <h2>Order Placed Successfully!</h2>
        <p>Your order has been placed and will be processed shortly.</p>
        <p>Order ID: <span id="displayOrderId"></span></p>
        
        <div class="payment-buttons">
            <a id="paypalLink" href="#" class="paypal-button">
                <i class="fab fa-paypal"></i> Proceed to Payment
            </a>
        </div>
    </div>
</div>

<script>
    const images = <%- JSON.stringify(listing.images || []) %>;
    let currentImageIndex = 0;
    
    // Check if isBookmarked is defined and set it properly
    let isBookmarked = <%= typeof isBookmarked !== 'undefined' ? isBookmarked : false %>;

    function showImage(index) {
        currentImageIndex = index;
        const sliderImage = document.getElementById('sliderImage');
        if (sliderImage && images.length > 0) {
            sliderImage.style.opacity = '0';
            setTimeout(() => {
                sliderImage.src = images[index];
                sliderImage.style.opacity = '1';
                
                // Update indicators
                document.querySelectorAll('.indicator').forEach((indicator, i) => {
                    if (i === index) {
                        indicator.classList.add('active');
                    } else {
                        indicator.classList.remove('active');
                    }
                });
            }, 200);
        }
    }

    function nextImage() {
        currentImageIndex = (currentImageIndex + 1) % images.length;
        showImage(currentImageIndex);
    }

    function prevImage() {
        currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;
        showImage(currentImageIndex);
    }

    function placeOrder() {
        const orderFormModal = document.getElementById('orderFormModal');
        orderFormModal.classList.add('active');
        document.body.style.overflow = 'hidden';
    }

    function bookmarkListing() {
        // Get the bookmark button
        const bookmarkBtn = document.getElementById('bookmarkBtn');
        const originalHTML = bookmarkBtn.innerHTML;
        const originalClass = bookmarkBtn.className;
        
        // Toggle loading state
        bookmarkBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        bookmarkBtn.disabled = true;
        
        // Check if user is logged in first (optional)
        fetch('/api/v1/user/check-auth')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Not authenticated');
                }
                
                // If authenticated, send the bookmark toggle request
                return fetch(`/api/v1/bookmarks/toggle/<%= listing._id %>`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ listingId: '<%= listing._id %>' })
                });
            })
            .then(response => {
                if (!response.ok && response.status === 401) {
                    // User not logged in
                    alert('Please log in to bookmark items');
                    window.location.href = '/api/v1/user/login';
                    throw new Error('Authentication required');
                }
                return response.json();
            })
            .then(data => {
                let success = false;
                let bookmarked = isBookmarked; // Default to current state
                
                // Handle different response formats
                if (data.message && (
                    data.message.includes('bookmarked') || 
                    data.message.includes('removed from bookmarks')
                )) {
                    success = true;
                    bookmarked = data.message.includes('bookmarked') && !data.message.includes('removed');
                } else {
                    success = data.success || response.ok;
                    bookmarked = data.isBookmarked ?? !isBookmarked;
                }
                
                // Update button state
                bookmarkBtn.disabled = false;
                
                if (success) {
                    // Update the isBookmarked variable
                    isBookmarked = bookmarked;
                    
                    // Update the button appearance based on bookmark status
                    if (bookmarked) {
                        bookmarkBtn.innerHTML = '<i class="fas fa-bookmark"></i> Bookmarked';
                        bookmarkBtn.classList.add('secondary-link-active');
                    } else {
                        bookmarkBtn.innerHTML = '<i class="far fa-bookmark"></i> Bookmark';
                        bookmarkBtn.classList.remove('secondary-link-active');
                    }
                    
                    // Show notification
                    showBookmarkNotification(bookmarked);
                } else {
                    // If there was an error, reset the button
                    bookmarkBtn.innerHTML = originalHTML;
                    bookmarkBtn.className = originalClass;
                    console.error('Bookmark update failed:', data);
                }
            })
            .catch(error => {
                console.error('Error in bookmark process:', error);
                
                if (!error.message.includes('Authentication required')) {
                    // Only reset the button if we're not redirecting
                    bookmarkBtn.disabled = false;
                    bookmarkBtn.innerHTML = originalHTML;
                    bookmarkBtn.className = originalClass;
                }
            });
    }
    
    // Helper function to show bookmark notification
    function showBookmarkNotification(isBookmarked) {
        // Remove any existing notifications first
        const existingNotifications = document.querySelectorAll('.bookmark-notification');
        existingNotifications.forEach(notification => {
            // Clear any existing removal timers
            if (notification.dataset.timeoutId) {
                clearTimeout(parseInt(notification.dataset.timeoutId));
            }
            notification.remove();
        });
        
        // Create new notification
        const notification = document.createElement('div');
        notification.className = 'bookmark-notification';
        notification.textContent = isBookmarked ? 'Added to bookmarks!' : 'Removed from bookmarks!';
        document.body.appendChild(notification);
        
        // Add a small delay to ensure proper animation rendering
        setTimeout(() => {
            // Force a reflow to ensure the animation starts correctly
            notification.offsetWidth;
            
            // Set a timeout to remove the notification
            const fadeOutTimeoutId = setTimeout(() => {
                notification.classList.add('fade-out');
                
                const removeTimeoutId = setTimeout(() => {
                    if (document.body.contains(notification)) {
                        notification.remove();
                    }
                }, 500);
                
                // Store the timeout ID in case we need to clear it
                notification.dataset.removeTimeoutId = removeTimeoutId;
            }, 2000);
            
            // Store the timeout ID in case we need to clear it
            notification.dataset.timeoutId = fadeOutTimeoutId;
        }, 10);
    }
    
    // Optional: Auto-play slideshow
    if (images.length > 1) {
        setInterval(nextImage, 5000);
    }
    
    // Add smooth transition for slider image
    const sliderImage = document.getElementById('sliderImage');
    if (sliderImage) {
        sliderImage.style.transition = 'opacity 0.2s ease-in-out';
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        const orderForm = document.getElementById('orderForm');
        const orderSuccessModal = document.getElementById('orderSuccessModal');
        const closeSuccessModalBtn = document.getElementById('closeSuccessModal');
        
        if (orderForm) {
            orderForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Collect form data
                const formData = {
                    listingId: document.getElementById('listingId').value,
                    name: document.getElementById('fullName').value,
                    address: document.getElementById('address').value,
                    city: document.getElementById('city').value,
                    pincode: document.getElementById('pincode').value,
                    phone: document.getElementById('phone').value,
                    paymentMethod: document.querySelector('input[name="paymentMethod"]:checked').value
                };
                
                try {
                    console.log("Submitting order data:", formData);
                    
                    // Update the API endpoint to match the backend route
                    const response = await fetch('/api/v1/orders', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    const result = await response.json();
                    console.log("Server response:", result);
                    
                    if (response.ok) {
                        // Check if we have a paypalLink in the response
                        const paypalLink = result.message?.paypalLink;
                        
                        if (paypalLink) {
                            // Redirect directly to PayPal for payment
                            window.location.href = paypalLink;
                        } else {
                            // Display order ID in modal
                            document.getElementById('displayOrderId').textContent = result.message?.order?._id || 'Unknown';
                            
                            // Show success modal if no direct PayPal link
                            orderSuccessModal.style.display = 'flex';
                        }
                    } else {
                        alert('Error creating order: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while placing your order. Please try again.');
                }
            });
        } else {
            console.error("Order form not found on page");
        }
        
        // Close modal functionality
        if (closeSuccessModalBtn) {
            closeSuccessModalBtn.addEventListener('click', function() {
                orderSuccessModal.style.display = 'none';
            });
        }
        
        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === orderSuccessModal) {
                orderSuccessModal.style.display = 'none';
            }
        });
    });
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Order modal handling
    const placeOrderBtn = document.getElementById('placeOrderBtn');
    const orderFormModal = document.getElementById('orderFormModal');
    const closeOrderModalBtn = document.getElementById('closeOrderModal');
    const orderForm = document.getElementById('orderForm');
    const orderSuccessModal = document.getElementById('orderSuccessModal');
    const closeSuccessModalBtn = document.getElementById('closeSuccessModal');
    
    // Open the order form modal when "Place Order" is clicked
    if (placeOrderBtn) {
        placeOrderBtn.addEventListener('click', function(e) {
            e.preventDefault();
            orderFormModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        });
    }
    
    // Close the order form modal
    if (closeOrderModalBtn) {
        closeOrderModalBtn.addEventListener('click', function() {
            orderFormModal.classList.remove('active');
            document.body.style.overflow = '';
        });
    }
    
    // Close the order success modal
    if (closeSuccessModalBtn) {
        closeSuccessModalBtn.addEventListener('click', function() {
            orderSuccessModal.style.display = 'none';
        });
    }
    
    // Handle order form submission - Remove this duplicate handler
    if (orderForm) {
        // Remove existing event listeners if any
        const clonedForm = orderForm.cloneNode(true);
        orderForm.parentNode.replaceChild(clonedForm, orderForm);
        
        // Add our single event listener
        clonedForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Disable submit button to prevent double-submission
            const submitBtn = this.querySelector('button[type="submit"]');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            
            // Collect form data
            const formData = {
                listingId: document.getElementById('listingId').value,
                name: document.getElementById('fullName').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                pincode: document.getElementById('pincode').value,
                phone: document.getElementById('phone').value,
                paymentMethod: document.querySelector('input[name="paymentMethod"]:checked').value
            };
            
            try {
                console.log('Submitting order data:', formData);
                
                // Try both endpoints to handle different API configurations
                let endpoint = '/api/v1/orders/create';
                let response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                // If first endpoint fails, try the fallback
                if (!response.ok && response.status === 404) {
                    endpoint = '/api/v1/orders';
                    response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
                }
                
                const result = await response.json();
                console.log('Server response:', result);
                
                if (response.ok) {
                    // Close the order form modal
                    orderFormModal.classList.remove('active');
                    
                    // Get paypal link from different possible response formats
                    const paypalLink = result.paypalLink || 
                                      (result.message && result.message.paypalLink) || 
                                      (result.order && result.order.paypalLink) ||
                                      (result.message && result.message.order && result.message.order.paypalLink);
                    
                    if (paypalLink) {
                        // Set the PayPal link in the button first
                        const paypalButton = document.getElementById('paypalLink');
                        if (paypalButton) {
                            paypalButton.href = paypalLink;
                        }
                        
                        // Display order ID in success modal if available
                        const orderId = result.orderId || 
                                      (result.message && result.message.orderId) || 
                                      (result.order && result.order._id) ||
                                      (result.message && result.message.order && result.message.order._id);
                        
                        if (orderId) {
                            document.getElementById('displayOrderId').textContent = orderId;
                        }
                        
                        // Show success modal before redirecting
                        orderSuccessModal.style.display = 'flex';
                        
                        // Redirect after a short delay
                        setTimeout(() => {
                            window.location.href = paypalLink;
                        }, 1500);
                    } else {
                        // Display order ID in success modal
                        const orderId = result.orderId || 
                                      (result.message && result.message.orderId) || 
                                      (result.order && result.order._id) ||
                                      (result.message && result.message.order && result.message.order._id) || 
                                      'Unknown';
                        
                        document.getElementById('displayOrderId').textContent = orderId;
                        
                        // Show success modal if no direct PayPal link
                        orderSuccessModal.style.display = 'flex';
                    }
                } else {
                    console.error('Error response:', result);
                    alert('Error creating order: ' + (result.message || 'Unknown error'));
                    // Re-enable submit button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-check-circle"></i> Confirm Order';
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while placing your order. Please try again.');
                
                // Re-enable submit button
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-check-circle"></i> Confirm Order';
            }
        });
    }
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target === orderFormModal) {
            orderFormModal.classList.remove('active');
            document.body.style.overflow = '';
        }
        if (event.target === orderSuccessModal) {
            orderSuccessModal.style.display = 'none';
        }
    });
});
</script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Check for touch events to optimize slider controls for mobile
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    if (isTouchDevice) {
      // Make controls easier to tap
      const sliderButtons = document.querySelectorAll('.slider-buttons button');
      sliderButtons.forEach(button => {
        button.style.width = '50px';
        button.style.height = '50px';
      });
      
      // Add swipe functionality for image slider
      const sliderImage = document.getElementById('sliderImage');
      if (sliderImage) {
        let touchStartX = 0;
        let touchEndX = 0;
        
        sliderImage.addEventListener('touchstart', e => {
          touchStartX = e.changedTouches[0].screenX;
        });
        
        sliderImage.addEventListener('touchend', e => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        });
        
        function handleSwipe() {
          if (touchEndX < touchStartX - 50) {
            // Swipe left - next image
            nextImage();
          } else if (touchEndX > touchStartX + 50) {
            // Swipe right - previous image
            prevImage();
          }
        }
      }
    }
  });
</script>

<style>
/* Modal styles */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.7);
    z-index: 1000;
    align-items: center;
    justify-content: center;
    overflow-y: auto;
    padding: 20px;
}

.modal.active {
    display: flex;
}

.modal-content {
    position: relative;
    background-color: #fff;
    border-radius: 8px;
    padding: 30px;
    width: 100%;
    max-width: 600px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    animation: fadeIn 0.3s;
}

.close-modal {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    color: #777;
    transition: color 0.3s;
}

.close-modal:hover {
    color: #333;
}

/* Form styling */
.form-group {
    margin-bottom: 20px;
}

.form-row {
    display: flex;
    gap: 15px;
    margin-bottom: 20px;
}

.form-row .form-group {
    flex: 1;
    margin-bottom: 0;
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #333;
}

input[type="text"],
input[type="tel"],
textarea {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    transition: border-color 0.3s;
}

input[type="text"]:focus,
input[type="tel"]:focus,
textarea:focus {
    border-color: #3498db;
    outline: none;
    box-shadow: 0 0 0 2px rgba(52,152,219,0.2);
}

textarea {
    min-height: 100px;
    resize: vertical;
}

.payment-options {
    margin-top: 25px;
}

.payment-methods {
    display: flex;
    gap: 20px;
    margin-top: 10px;
}

.payment-method {
    display: flex;
    align-items: center;
    gap: 8px;
}

.payment-method input[type="radio"] {
    margin: 0;
}

.order-summary {
    margin: 25px 0;
    padding: 15px;
    background-color: #f8f9fa;
    border-radius: 6px;
}

.order-summary h3 {
    margin-top: 0;
    margin-bottom: 15px;
    color: #333;
    font-size: 18px;
}

.summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
}

.submit-btn {
    display: block;
    width: 100%;
    padding: 12px 0;
    background-color: #27ae60;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.submit-btn:hover {
    background-color: #219653;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(39,174,96,0.3);
}

.submit-btn:disabled {
    background-color: #95a5a6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* Success modal */
.success-modal {
    text-align: center;
    padding: 40px 30px;
}

.success-icon {
    font-size: 60px;
    color: #27ae60;
    margin-bottom: 20px;
}

.payment-buttons {
    margin-top: 25px;
    display: flex;
    justify-content: center;
}

.paypal-button {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 12px 25px;
    background-color: #0070ba;
    color: white;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 500;
    transition: all 0.3s;
}

.paypal-button:hover {
    background-color: #005ea6;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,112,186,0.3);
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

@media (max-width: 768px) {
    .form-row {
        flex-direction: column;
        gap: 20px;
    }
    
    .modal-content {
        padding: 20px;
        margin: 20px;
    }
}
</style>

<!-- Remove this line as we're now incorporating the script directly -->
<!-- <script src="/js/listing-details.js"></script> -->

</body>
</html>