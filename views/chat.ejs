<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Chat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }

        .chat-container {
            background: white;
            padding: 20px;
            width: 400px;
            height: 600px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
        }

        .chat-box {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 5px;
            border: 1px solid #ddd;
            max-height: 450px;
        }

        .chat-box .message {
            padding: 10px;
            border-radius: 5px;
            margin: 5px 0;
            display: flex;
            justify-content: flex-start;
        }

        .chat-box .message.sent {
            background-color: #cfe2ff;
            align-self: flex-end;
        }

        .chat-box .message.received {
            background-color: #e2e3e5;
        }

        input[type="text"] {
            padding: 10px;
            width: 100%;
            border-radius: 5px;
            border: 1px solid #ddd;
            margin: 5px 0;
        }

        button {
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
        }

        button:hover {
            background-color: #45a049;
        }

        .typing-status {
            font-style: italic;
            color: #888;
            text-align: center;
            display: none;
        }

    </style>
</head>
<body>

    <div class="chat-container">
        <h2>Live Chat</h2>
        <div class="chat-box" id="chatBox"></div>
        <div class="typing-status" id="typingStatus">Other user is typing...</div>
        <input type="text" id="messageInput" placeholder="Type your message..." />
        <button id="sendMessageButton">Send</button>
    </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Function to get a cookie value by name
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) {
            return parts.pop().split(';').shift();
        }
        return null; // Return null if the cookie is not found
    }

    // Get the JWT token from the cookies
    const token = getCookie('accessToken'); // Ensure that the cookie name is correct
    console.log('Token retrieved:', token); // This should log the token if it's correctly set

    // Check if the token is available before emitting
    if (token) {
        const socket = io(); // Connect to the server
        socket.emit('user-logged-in', token); // Send JWT token to the server to authenticate
        
        // Handle sending a message
        function sendMessage() {
            const message = document.getElementById('messageInput').value;
            const receiverId = 'receiver-user-id'; // You can dynamically set this (buyer/sender)
            const senderId = token; // Here you can use the token as the sender's ID if it includes the user's ID

            if (message.trim()) {
                socket.emit('send-message', { senderId, receiverId, message });
            }
        }

        // Listen for new messages
        socket.on('newMessage', (messageData) => {
            const { senderId, message } = messageData;
            console.log(`New message from ${senderId}: ${message}`);
            const messageElement = document.createElement('div');
            messageElement.classList.add('message', 'received');
            messageElement.textContent = message;
            document.getElementById('chatBox').appendChild(messageElement);
        });

        // Typing indicator
        function typing() {
            socket.emit('typing', { senderId: token });
        }

        socket.on('typing', (data) => {
            console.log(`${data.senderId} is typing...`);
            document.getElementById('typingStatus').style.display = 'block';
        });

        socket.on('stopTyping', () => {
            document.getElementById('typingStatus').style.display = 'none';
        });

        // Add event listener to send message
        document.getElementById('sendMessageButton').addEventListener('click', sendMessage);
    } else {
        console.error('Token is not available.');
    }

  </script>

</body>
</html>
