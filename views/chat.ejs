<%- include('./partials/header.ejs') %>

<div class="container chat-container">
  <h1>Messages</h1>
  
  <div class="chat-interface">
    <!-- Left side: User list -->
    <div class="chat-users">
      <div class="chat-search">
        <input type="text" id="searchUsers" placeholder="Search users...">
        <i class="fas fa-search"></i>
      </div>
      
      <div class="users-list" id="chatRoomsList">
        <!-- Chat rooms will be populated here dynamically -->
        <div class="loading-indicator">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Right side: Chat area -->
    <div class="chat-area">
      <div class="chat-header">
        <div class="chat-user-info" id="chatRoomHeader">
          <img src="https://via.placeholder.com/40" alt="Select a chat">
          <h3>Select a conversation</h3>
        </div>
        <div class="chat-actions">
          <i class="fas fa-info-circle" id="viewListingDetails"></i>
        </div>
      </div>
      
      <div class="messages-container" id="messagesContainer">
        <div class="select-chat-prompt">
          <p>Select a conversation to start chatting</p>
        </div>
      </div>
      
      <div class="message-input" id="messageInputContainer">
        <div class="emoji-btn">
          <i class="far fa-smile"></i>
        </div>
        <input type="text" id="messageInput" placeholder="Message..." disabled>
        <div class="attachment-btn">
          <i class="fas fa-paperclip"></i>
        </div>
        <button class="send-btn" id="sendButton" disabled>
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Listing details modal -->
<div class="modal fade" id="listingDetailsModal" tabindex="-1" aria-labelledby="listingDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="listingDetailsModalLabel">Listing Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="listingDetailsContent">
        <!-- Listing details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="viewFullListing">View Full Listing</button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Chat page specific styles */
  .chat-container h1 {
    margin-bottom: 20px;
  }
  
  .chat-interface {
    display: flex;
    height: 75vh;
    background-color: #fff;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  /* User list styles */
  .chat-users {
    width: 35%;
    border-right: 1px solid #eee;
    display: flex;
    flex-direction: column;
  }
  
  .chat-search {
    padding: 15px;
    border-bottom: 1px solid #eee;
    position: relative;
  }
  
  .chat-search input {
    width: 100%;
    padding: 10px 40px 10px 15px;
    border-radius: 20px;
    border: 1px solid #ddd;
    background: #f5f5f5;
  }
  
  .chat-search i {
    position: absolute;
    right: 30px;
    top: 25px;
    color: #aaa;
  }
  
  .users-list {
    flex: 1;
    overflow-y: auto;
  }
  
  .chat-user {
    display: flex;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #f5f5f5;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .chat-user:hover, .chat-user.active {
    background-color: #f5f5f5;
  }
  
  .user-avatar {
    position: relative;
    margin-right: 15px;
  }
  
  .user-avatar img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
  }
  
  .status-indicator {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background-color: #ccc;
    border: 2px solid white;
  }
  
  .status-indicator.online {
    background-color: #4caf50;
  }
  
  .user-info {
    flex: 1;
  }
  
  .user-info h4 {
    margin: 0;
    font-size: 16px;
    color: #333;
  }
  
  .last-message {
    margin: 5px 0 0;
    font-size: 13px;
    color: #777;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px;
  }
  
  .message-time {
    font-size: 12px;
    color: #aaa;
  }
  
  /* Chat area styles */
  .chat-area {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .chat-header {
    padding: 15px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .chat-user-info {
    display: flex;
    align-items: center;
  }
  
  .chat-user-info img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    object-fit: cover;
  }
  
  .chat-user-info h3 {
    margin: 0;
    font-size: 18px;
  }
  
  .chat-actions {
    display: flex;
    gap: 20px;
  }
  
  .chat-actions i {
    font-size: 18px;
    color: #3498db;
    cursor: pointer;
    transition: color 0.2s;
  }
  
  .chat-actions i:hover {
    color: #2980b9;
  }
  
  .messages-container {
    flex: 1;
    padding: 15px;
    overflow-y: auto;
    background-color: #f9f9f9;
  }
  
  .date-divider {
    text-align: center;
    margin: 15px 0;
    position: relative;
  }
  
  .date-divider:before {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    width: 100%;
    height: 1px;
    background: #ddd;
    z-index: 0;
  }
  
  .date-divider span {
    background-color: #f9f9f9;
    padding: 0 15px;
    font-size: 14px;
    color: #999;
    position: relative;
    z-index: 1;
  }
  
  .message {
    display: flex;
    flex-direction: column;
    max-width: 70%;
    margin-bottom: 15px;
  }
  
  .message.sent {
    align-self: flex-end;
    margin-left: auto;
  }
  
  .message.received {
    align-self: flex-start;
    margin-right: auto;
  }
  
  .message-content {
    padding: 10px 15px;
    border-radius: 18px;
    margin-bottom: 2px;
  }
  
  .message.sent .message-content {
    background-color: #3498db;
    color: white;
    border-bottom-right-radius: 4px;
  }
  
  .message.received .message-content {
    background-color: white;
    color: #333;
    border-bottom-left-radius: 4px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }
  
  .message-time {
    font-size: 11px;
    color: #999;
    align-self: flex-end;
  }
  
  .message.sent .message-time {
    margin-right: 5px;
  }
  
  .message.received .message-time {
    margin-left: 5px;
  }
  
  .message-input {
    padding: 15px;
    display: flex;
    align-items: center;
    border-top: 1px solid #eee;
    background-color: #fff;
  }
  
  .message-input input {
    flex: 1;
    padding: 10px 15px;
    border-radius: 24px;
    border: 1px solid #ddd;
    margin: 0 10px;
  }
  
  .emoji-btn, .attachment-btn {
    font-size: 20px;
    color: #aaa;
    cursor: pointer;
    transition: color 0.2s;
  }
  
  .emoji-btn:hover, .attachment-btn:hover {
    color: #3498db;
  }
  
  .send-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #3498db;
    color: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s;
    padding: 0;
    min-width: auto;
  }
  
  .send-btn:hover {
    background-color: #2980b9;
  }
  
  /* New styling for the chat interface */
  .loading-indicator {
    display: flex;
    justify-content: center;
    padding: 20px;
  }
  
  .select-chat-prompt {
    display: flex;
    height: 100%;
    align-items: center;
    justify-content: center;
    color: #999;
    font-size: 16px;
  }
  
  .typing-indicator {
    font-size: 12px;
    color: #999;
    padding: 5px 15px;
    font-style: italic;
  }
  
  .unread-badge {
    background-color: #3498db;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    margin-left: 5px;
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .chat-interface {
      flex-direction: column;
      height: auto;
    }
    
    .chat-users, .chat-area {
      width: 100%;
    }
    
    .chat-users {
      border-right: none;
      border-bottom: 1px solid #eee;
      max-height: 300px;
    }
    
    .messages-container {
      max-height: 50vh;
    }
  }
</style>

<!-- Socket.io client script -->
<script src="/socket.io/socket.io.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize variables
    let socket;
    let currentUser = null;
    let currentRoom = null;
    let chatRooms = [];
    let typingTimeout = null;
    
    const messagesContainer = document.getElementById('messagesContainer');
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendButton');
    const chatRoomsList = document.getElementById('chatRoomsList');
    const searchInput = document.getElementById('searchUsers');
    const viewListingDetails = document.getElementById('viewListingDetails');
    const viewFullListing = document.getElementById('viewFullListing');
    
    // Fetch current user details
    async function getCurrentUser() {
      try {
        const response = await fetch('/api/users/me');
        if (!response.ok) throw new Error('Failed to fetch user data');
        
        const userData = await response.json();
        currentUser = userData;
        initializeSocket(userData._id);
        loadChatRooms();
      } catch (error) {
        console.error('Error fetching current user:', error);
        showError('Unable to load user data. Please try refreshing the page.');
      }
    }
    
    // Initialize Socket.io connection
    function initializeSocket(userId) {
      socket = io();
      
      // Authenticate with the server
      socket.emit('authenticate', userId);
      
      // Listen for new messages
      socket.on('new_message', ({ roomId, message }) => {
        if (currentRoom && currentRoom._id === roomId) {
          appendMessage(message);
          scrollToBottom();
          socket.emit('mark_read', { roomId });
        } else {
          // Update unread count in the chat list
          updateChatRoomUnreadCount(roomId);
        }
      });
      
      // Listen for typing indicators
      socket.on('typing', ({ roomId, userId }) => {
        if (currentRoom && currentRoom._id === roomId) {
          showTypingIndicator(userId);
        }
      });
      
      // Listen for stop typing indicators
      socket.on('stop_typing', ({ roomId }) => {
        if (currentRoom && currentRoom._id === roomId) {
          hideTypingIndicator();
        }
      });
      
      // Listen for user status changes
      socket.on('user_status', ({ userId, status }) => {
        updateUserStatus(userId, status);
      });
      
      // Listen for read receipts
      socket.on('messages_read', ({ roomId, userId }) => {
        if (currentRoom && currentRoom._id === roomId) {
          updateReadReceipts(userId);
        }
      });
    }
    
    // Load all chat rooms for the current user
    async function loadChatRooms() {
      try {
        const response = await fetch('/api/chat/rooms');
        if (!response.ok) throw new Error('Failed to fetch chat rooms');
        
        chatRooms = await response.json();
        renderChatRoomsList(chatRooms);
        
        // Check if we need to open a specific room from URL
        if (roomIdFromUrl) {
          openRoomFromUrl();
        }
      } catch (error) {
        console.error('Error loading chat rooms:', error);
        chatRoomsList.innerHTML = `<div class="error-message">Failed to load conversations. Please try again.</div>`;
      }
    }
    
    // Render the list of chat rooms
    function renderChatRoomsList(rooms) {
      chatRoomsList.innerHTML = '';
      
      if (rooms.length === 0) {
        chatRoomsList.innerHTML = '<div class="no-chats">No conversations yet</div>';
        return;
      }
      
      rooms.forEach(room => {
        // Find the other user in the conversation
        const otherUser = room.users.find(user => user._id !== currentUser._id);
        
        // Calculate unread message count
        const unreadCount = room.messages.length > 0 ? 
          room.messages.filter(msg => 
            msg.sender._id !== currentUser._id && 
            !msg.readBy.includes(currentUser._id)
          ).length : 0;
        
        // Get last message preview
        const lastMessage = room.messages.length > 0 ? 
          room.messages[0].content : 'No messages yet';
        
        // Format timestamp
        const timestamp = room.messages.length > 0 ? 
          formatTimestamp(new Date(room.messages[0].createdAt)) : '';
        
        const roomElement = document.createElement('div');
        roomElement.className = 'chat-user';
        roomElement.dataset.roomId = room._id;
        roomElement.innerHTML = `
          <div class="user-avatar">
            <img src="${otherUser.profilePicture || 'https://via.placeholder.com/50'}" alt="${otherUser.name}">
            <span class="status-indicator"></span>
          </div>
          <div class="user-info">
            <h4>${otherUser.name}</h4>
            <p class="last-message">${lastMessage}</p>
          </div>
          <div class="message-info">
            <div class="message-time">${timestamp}</div>
            ${unreadCount > 0 ? `<div class="unread-badge">${unreadCount}</div>` : ''}
          </div>
        `;
        
        roomElement.addEventListener('click', () => loadChatRoom(room._id));
        chatRoomsList.appendChild(roomElement);
      });
    }
    
    // Load a specific chat room
    async function loadChatRoom(roomId) {
      try {
        // Highlight the selected chat
        const chatItems = document.querySelectorAll('.chat-user');
        chatItems.forEach(item => item.classList.remove('active'));
        document.querySelector(`.chat-user[data-room-id="${roomId}"]`).classList.add('active');
        
        // Fetch chat room details
        const response = await fetch(`/api/chat/rooms/${roomId}`);
        if (!response.ok) throw new Error('Failed to fetch chat room');
        
        currentRoom = await response.json();
        
        // Enable the message input
        messageInput.disabled = false;
        sendButton.disabled = false;
        messageInput.focus();
        
        // Render the chat room header
        renderChatRoomHeader();
        
        // Render messages
        renderMessages();
        
        // Mark messages as read
        socket.emit('mark_read', { roomId });
        
        // Remove unread badge
        const unreadBadge = document.querySelector(`.chat-user[data-room-id="${roomId}"] .unread-badge`);
        if (unreadBadge) unreadBadge.remove();
      } catch (error) {
        console.error('Error loading chat room:', error);
        messagesContainer.innerHTML = `<div class="error-message">Failed to load conversation. Please try again.</div>`;
      }
    }
    
    // Render the chat room header with user info and listing details
    function renderChatRoomHeader() {
      if (!currentRoom) return;
      
      const otherUser = currentRoom.users.find(user => user._id !== currentUser._id);
      const listingInfo = currentRoom.listing;
      
      document.getElementById('chatRoomHeader').innerHTML = `
        <img src="${otherUser.profilePicture || 'https://via.placeholder.com/40'}" alt="${otherUser.name}">
        <div>
          <h3>${otherUser.name}</h3>
          <small class="text-muted">${listingInfo.title} - $${listingInfo.price}</small>
        </div>
      `;
    }
    
    // Render all messages in the current chat room
    function renderMessages() {
      if (!currentRoom) return;
      
      messagesContainer.innerHTML = '';
      
      // Add a date separator for today
      const today = new Date();
      addDateSeparator(today);
      
      // Render each message
      currentRoom.messages.forEach(message => {
        appendMessage(message);
      });
      
      // Scroll to bottom
      scrollToBottom();
    }
    
    // Append a single message to the messages container
    function appendMessage(message) {
      const isSentByCurrentUser = message.sender._id === currentUser._id;
      const messageElement = document.createElement('div');
      messageElement.className = `message ${isSentByCurrentUser ? 'sent' : 'received'}`;
      messageElement.dataset.messageId = message._id;
      
      messageElement.innerHTML = `
        <div class="message-content">
          <p>${message.content}</p>
        </div>
        <div class="message-time">
          ${formatTime(new Date(message.createdAt))}
          ${isSentByCurrentUser ? 
            `<span class="read-status">${message.readBy.length > 1 ? '✓✓' : '✓'}</span>` : ''}
        </div>
      `;
      
      messagesContainer.appendChild(messageElement);
    }
    
    // Add a date separator to the messages container
    function addDateSeparator(date) {
      const dateDivider = document.createElement('div');
      dateDivider.className = 'date-divider';
      dateDivider.innerHTML = `<span>${formatDate(date)}</span>`;
      messagesContainer.appendChild(dateDivider);
    }
    
    // Send a message
    async function sendMessage() {
      if (!currentRoom) return;
      
      const content = messageInput.value.trim();
      if (!content) return;
      
      // Clear input
      messageInput.value = '';
      
      try {
        // 1. Send to server via API
        const response = await fetch(`/api/chat/rooms/${currentRoom._id}/messages`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ content })
        });
        
        if (!response.ok) throw new Error('Failed to send message');
        
        const message = await response.json();
        
        // 2. Send via Socket.io for real-time updates
        socket.emit('send_message', {
          roomId: currentRoom._id,
          content
        });
        
        // 3. Clear typing indicator
        clearTimeout(typingTimeout);
        socket.emit('stop_typing', { roomId: currentRoom._id });
      } catch (error) {
        console.error('Error sending message:', error);
        showError('Failed to send message. Please try again.');
      }
    }
    
    // Show typing indicator
    function showTypingIndicator(userId) {
      // Remove any existing typing indicator
      hideTypingIndicator();
      
      // Find the user
      const user = currentRoom.users.find(u => u._id === userId);
      if (!user) return;
      
      const typingElement = document.createElement('div');
      typingElement.className = 'typing-indicator';
      typingElement.textContent = `${user.name} is typing...`;
      
      messagesContainer.appendChild(typingElement);
      scrollToBottom();
    }
    
    // Hide typing indicator
    function hideTypingIndicator() {
      const typingIndicator = document.querySelector('.typing-indicator');
      if (typingIndicator) typingIndicator.remove();
    }
    
    // Update user online status
    function updateUserStatus(userId, status) {
      const userElements = document.querySelectorAll(`.chat-user`);
      
      userElements.forEach(el => {
        const roomId = el.dataset.roomId;
        const room = chatRooms.find(r => r._id === roomId);
        
        if (room) {
          const otherUser = room.users.find(u => u._id === userId);
          if (otherUser) {
            const statusIndicator = el.querySelector('.status-indicator');
            if (status === 'online') {
              statusIndicator.classList.add('online');
            } else {
              statusIndicator.classList.remove('online');
            }
          }
        }
      });
    }
    
    // Update unread count for a chat room
    function updateChatRoomUnreadCount(roomId) {
      const roomElement = document.querySelector(`.chat-user[data-room-id="${roomId}"]`);
      if (!roomElement) return;
      
      let unreadBadge = roomElement.querySelector('.unread-badge');
      
      if (!unreadBadge) {
        unreadBadge = document.createElement('div');
        unreadBadge.className = 'unread-badge';
        unreadBadge.textContent = '1';
        roomElement.querySelector('.message-info').appendChild(unreadBadge);
      } else {
        const currentCount = parseInt(unreadBadge.textContent);
        unreadBadge.textContent = (currentCount + 1).toString();
      }
    }
    
    // Update read receipts when messages are read
    function updateReadReceipts(userId) {
      if (!currentRoom) return;
      
      const sentMessages = document.querySelectorAll('.message.sent');
      sentMessages.forEach(messageEl => {
        const messageId = messageEl.dataset.messageId;
        const message = currentRoom.messages.find(m => m._id === messageId);
        
        if (message && !message.readBy.includes(userId)) {
          message.readBy.push(userId);
          messageEl.querySelector('.read-status').textContent = '✓✓';
        }
      });
    }
    
    // Show the listing details modal
    function showListingDetails() {
      if (!currentRoom || !currentRoom.listing) return;
      
      const listing = currentRoom.listing;
      
      const modalContent = document.getElementById('listingDetailsContent');
      modalContent.innerHTML = `
        <div class="listing-detail">
          <div class="listing-images">
            <img src="${listing.images[0] || 'https://via.placeholder.com/300'}" class="img-fluid" alt="${listing.title}">
          </div>
          <div class="listing-info mt-3">
            <h3>${listing.title}</h3>
            <h4 class="text-primary">$${listing.price}</h4>
            <p>${listing.description}</p>
          </div>
        </div>
      `;
      
      // Set up the view full listing button
      viewFullListing.onclick = () => {
        window.location.href = `/listing/${listing._id}`;
      };
      
      // Show the modal
      const listingModal = new bootstrap.Modal(document.getElementById('listingDetailsModal'));
      listingModal.show();
    }
    
    // Format date for display
    function formatDate(date) {
      const today = new Date();
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      
      if (date.toDateString() === today.toDateString()) {
        return 'Today';
      } else if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday';
      } else {
        return date.toLocaleDateString();
      }
    }
    
    // Format time for message timestamps
    function formatTime(date) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // Format timestamp for chat list
    function formatTimestamp(date) {
      const now = new Date();
      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const yesterday = new Date(today);
      yesterday.setDate(yesterday.getDate() - 1);
      const dateOnly = new Date(date.getFullYear(), date.getMonth(), date.getDate());
      
      if (dateOnly.getTime() === today.getTime()) {
        return formatTime(date);
      } else if (dateOnly.getTime() === yesterday.getTime()) {
        return 'Yesterday';
      } else {
        return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
      }
    }
    
    // Scroll the messages container to the bottom
    function scrollToBottom() {
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // Show error message
    function showError(message) {
      const errorElement = document.createElement('div');
      errorElement.className = 'alert alert-danger';
      errorElement.textContent = message;
      
      document.querySelector('.chat-container').prepend(errorElement);
      
      // Remove after 5 seconds
      setTimeout(() => {
        errorElement.remove();
      }, 5000);
    }
    
    // Event Listeners
    sendButton.addEventListener('click', sendMessage);
    
    messageInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendMessage();
      } else if (currentRoom) {
        // Send typing indicator
        socket.emit('typing', { roomId: currentRoom._id });
        
        // Clear existing timeout
        clearTimeout(typingTimeout);
        
        // Set timeout for stop typing
        typingTimeout = setTimeout(() => {
          socket.emit('stop_typing', { roomId: currentRoom._id });
        }, 2000);
      }
    });
    
    viewListingDetails.addEventListener('click', showListingDetails);
    
    searchInput.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase();
      
      const filteredRooms = chatRooms.filter(room => {
        const otherUser = room.users.find(user => user._id !== currentUser._id);
        return otherUser.name.toLowerCase().includes(searchTerm);
      });
      
      renderChatRoomsList(filteredRooms);
    });
    
    // Initialize the chat page
    getCurrentUser();
    
    // Check if there's a room ID in the URL query parameters
    const urlParams = new URLSearchParams(window.location.search);
    const roomIdFromUrl = urlParams.get('room');
    
    // Function to open specific room from URL parameter after rooms are loaded
    function openRoomFromUrl() {
      if (roomIdFromUrl && chatRooms.some(room => room._id === roomIdFromUrl)) {
        loadChatRoom(roomIdFromUrl);
      }
    }
  });
</script>

<%- include('./partials/footer.ejs') %>
