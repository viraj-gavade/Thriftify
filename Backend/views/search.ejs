<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= query ? `Search results for "${query}" | Thriftify` : 'Search Results | Thriftify' %></title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    /* Global Styles */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f7f7f7;
      margin: 0;
      padding: 0;
      color: #333;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      flex: 1;
    }
    
    /* Navbar Styles */
    .navbar {
      background: #2c3e50;
      color: white;
      padding: 15px 0;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      position: sticky;
      top: 0;
      z-index: 100;
    }
    
    /* ...existing code... */
    
    /* Listings Grid */
    #listings {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
      gap: 25px;
    }
    
    .listing {
      background: white;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(0,0,0,0.08);
      overflow: hidden;
      transition: all 0.3s;
      display: flex;
      flex-direction: column;
      animation: fadeIn 0.5s ease-in-out;
    }
    
    /* ...existing code... */
    
    /* Search Bar Styles */
    .search-bar {
      width: 100%;
      margin-bottom: 20px;
      position: relative;
    }
    
    .search-bar input {
      width: 100%;
      padding: 15px 20px;
      padding-left: 50px;
      font-size: 16px;
      border: none;
      border-radius: 10px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
    }
    
    .search-bar input:focus {
      outline: none;
      box-shadow: 0 2px 20px rgba(52, 152, 219, 0.3);
    }
    
    .search-bar i {
      position: absolute;
      left: 20px;
      top: 50%;
      transform: translateY(-50%);
      color: #95a5a6;
      font-size: 18px;
    }
    
    .search-bar .clear-search {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #7f8c8d;
      cursor: pointer;
      font-size: 16px;
      opacity: 0;
      visibility: hidden;
      transition: all 0.2s ease;
    }
    
    .search-bar input:not(:placeholder-shown) + .clear-search {
      opacity: 1;
      visibility: visible;
    }

    /* Search Results Specific Styles */
    .search-header {
      background-color: #fff;
      padding: 15px 20px;
      border-radius: 10px;
      margin-bottom: 20px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .search-header h2 {
      color: #2c3e50;
      font-size: 1.5rem;
      margin: 0;
    }

    .search-header .results-count {
      color: #7f8c8d;
      font-size: 1rem;
    }

    .back-to-home {
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      padding: 10px 15px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s;
      text-decoration: none;
      display: inline-block;
    }

    .back-to-home:hover {
      background: #2980b9;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .no-results {
      text-align: center;
      padding: 50px 0;
      animation: fadeIn 0.5s ease-in-out;
    }

    .no-results i {
      font-size: 60px;
      color: #95a5a6;
      margin-bottom: 20px;
    }

    .no-results h2 {
      color: #7f8c8d;
      margin-bottom: 15px;
    }

    .no-results p {
      color: #95a5a6;
      margin-bottom: 20px;
    }

    /* Animations */
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    @keyframes slideIn {
      from { transform: translateY(50px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
      #listings {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
      }
      
      /* ...existing code... */
    }
    
    @media (max-width: 576px) {
      #listings {
        grid-template-columns: 1fr;
      }
      
      /* ...existing code... */
    }
  </style>
</head>
<body>
  <!-- Navbar -->
  <%- include('partials/header') %>

  <div class="container">
    <!-- Search Results Header -->
    <div class="search-header">
      <div>
        <h2>Search Results</h2>
        <% if(query) { %>
          <p class="results-count">
            <% if(listings && listings.length > 0) { %>
              Found <%= listings.length %> results for "<%= query %>"
            <% } else { %>
              No results found for "<%= query %>"
            <% } %>
          </p>
        <% } %>
      </div>
      <a href="/" class="back-to-home"><i class="fas fa-arrow-left"></i> Back to Home</a>
    </div>
    
    <!-- Search Bar -->
    <div class="search-bar">
      <form id="searchForm" action="/search" method="GET">
        <input type="text" id="searchInput" name="q" placeholder="Search for items..." value="<%= query || '' %>">
        <i class="fas fa-search"></i>
        <button type="submit" style="display:none;"></button>
        
        <!-- Hidden fields to preserve filter state when submitting -->
        <% if(locals.filters) { %>
          <% if(filters.category) { %>
            <input type="hidden" name="category" value="<%= filters.category %>">
          <% } %>
          <% if(filters.location) { %>
            <input type="hidden" name="location" value="<%= filters.location %>">
          <% } %>
          <% if(filters.sortBy) { %>
            <input type="hidden" name="sortBy" value="<%= filters.sortBy %>">
          <% } %>
        <% } %>
      </form>
      <span class="clear-search" id="clearSearch">&times;</span>
    </div>

    <!-- Filters -->
    <div class="filters">
      <div class="filter-item">
        <label for="category">Category</label>
        <select id="category" name="category">
          <option value="">All Categories</option>
          <% if(locals.categories && categories.length > 0) { %>
            <% categories.forEach(category => { %>
              <option value="<%= category %>" <%= filters && filters.category === category ? 'selected' : '' %>><%= category %></option>
            <% }) %>
          <% } else { %>
            <option value="electronics">Electronics</option>
            <option value="furniture">Furniture</option>
            <option value="clothing">Clothing</option>
            <option value="books">Books</option>
            <option value="others">Others</option>
          <% } %>
        </select>
      </div>
      <div class="filter-item">
        <label for="location">Location</label>
        <input type="text" id="location" placeholder="Enter city name" value="<%= filters?.location || '' %>">
      </div>
      <div class="filter-item">
        <label for="sortOrder">Sort By</label>
        <select id="sortOrder">
          <option value="desc" <%= filters && filters.sortBy === 'desc' ? 'selected' : '' %>>Newest First</option>
          <option value="asc" <%= filters && filters.sortBy === 'asc' ? 'selected' : '' %>>Oldest First</option>
          <option value="price_low" <%= filters && filters.sortBy === 'price_low' ? 'selected' : '' %>>Price: Low to High</option>
          <option value="price_high" <%= filters && filters.sortBy === 'price_high' ? 'selected' : '' %>>Price: High to Low</option>
        </select>
      </div>
      <div class="filter-item">
        <label>&nbsp;</label>
        <button id="filterBtn"><i class="fas fa-filter"></i> Apply Filters</button>
      </div>
    </div>

    <!-- Listings or No Results -->
    <% if(listings && listings.length > 0) { %>
      <div id="listings">
        <% listings.forEach(listing => { 
          let isBookmarked = false;
          if(locals.user && locals.userBookmarks) {
            isBookmarked = userBookmarks.some(bookmark => 
              bookmark.listingId === listing._id || 
              bookmark._id === listing._id ||
              (bookmark.listing && bookmark.listing._id === listing._id)
            );
          }
          const bookmarkIcon = isBookmarked ? 'fas fa-bookmark' : 'far fa-bookmark';
          const bookmarkText = isBookmarked ? 'Bookmarked' : 'Bookmark';
          const bookmarkClass = isBookmarked ? 'bookmarkBtn bookmarked' : 'bookmarkBtn';
        %>
          <div class="listing">
            <div class="listing-image">
              <img src="<%= listing.images && listing.images.length ? listing.images[0] : 'https://via.placeholder.com/400x300?text=No+Image' %>" alt="<%= listing.title || 'Product' %>">
            </div>
            <div class="listing-details">
              <h2><%= listing.title || 'No Title' %></h2>
              <p class="listing-description"><%= listing.description || 'No Description' %></p>
              <div class="price">â‚¹<%= listing.price || 'N/A' %></div>
              <div class="listing-meta">
                <span><i class="fas fa-tag"></i> <%= listing.category || 'N/A' %></span>
                <span><i class="fas fa-map-marker-alt"></i> <%= listing.location || 'N/A' %></span>
              </div>
              <div class="posted-by">
                <i class="fas fa-user-circle"></i> <%= listing.postedBy?.fullname || 'Unknown' %> 
              </div>
              <div class="listing-actions">
                <button class="buyNowBtn" data-id="<%= listing._id %>"><i class="fas fa-shopping-cart"></i> Buy Now</button>
                <button class="<%= bookmarkClass %>" id="bookmarkBtn-<%= listing._id %>" data-id="<%= listing._id %>"><i class="<%= bookmarkIcon %>"></i> <%= bookmarkText %></button>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
    <% } else { %>
      <div class="no-results">
        <i class="fas fa-search"></i>
        <h2>No Results Found</h2>
        <p>Try adjusting your search or filters to find what you're looking for.</p>
        <a href="/" class="back-to-home"><i class="fas fa-home"></i> Back to Home</a>
      </div>
    <% } %>
  </div>
  
  <!-- Footer -->
  <%- include('partials/footer', {}) %>

  <script>
    // Global variable to store all fetched listings
    let allListings = <%- JSON.stringify(listings || []) %>;
    let currentSearchQuery = "<%= query || '' %>";

    // Clear search button functionality
    document.getElementById('clearSearch').addEventListener('click', function() {
      document.getElementById('searchInput').value = '';
      window.location.href = '/';
    });

    // Filter button functionality
    document.getElementById('filterBtn').addEventListener('click', function() {
      const category = document.getElementById('category').value;
      const location = document.getElementById('location').value;
      const sortOrder = document.getElementById('sortOrder').value;
      const searchQuery = document.getElementById('searchInput').value.trim();
      
      let url = '/search?';
      if (searchQuery) url += `q=${encodeURIComponent(searchQuery)}&`;
      if (category) url += `category=${encodeURIComponent(category)}&`;
      if (location) url += `location=${encodeURIComponent(location)}&`;
      url += `sortBy=${sortOrder}`;
      
      window.location.href = url;
    });

    // Handle Buy Now button
    document.querySelectorAll('.buyNowBtn').forEach(btn => {
      btn.addEventListener('click', function() {
        if (this.hasAttribute('data-id')) {
          const listingId = this.getAttribute('data-id');
          window.location.href = `/api/v1/listings/${listingId}`;
        }
      });
    });

    // Handle Bookmark button
    document.querySelectorAll('.bookmarkBtn').forEach(btn => {
      btn.addEventListener('click', async function() {
        const listingId = this.getAttribute('data-id');
        
        try {
          const button = this;
          const originalHTML = button.innerHTML;
          const originalClass = button.className;
          
          // Toggle loading state
          button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
          button.disabled = true;
          
          // Check if user is logged in first
          try {
            const checkLoginResponse = await fetch('/api/v1/user/check-auth');
            if (!checkLoginResponse.ok) {
              // User is not logged in
              alert('Please log in to bookmark items');
              window.location.href = '/api/v1/user/login';
              return;
            }
          } catch (err) {
            console.log('Auth check error:', err);
          }
          
          // Send an API request to toggle bookmark the listing
          const response = await fetch(`/api/v1/bookmarks/toggle/${listingId}`, {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ listingId: listingId })
          });
          
          let data;
          let isSuccess = false;
          let isBookmarked = false;

          try {
            data = await response.json();
            if (data.message && (
                data.message.includes('bookmarked') || 
                data.message.includes('removed from bookmarks')
            )) {
              isSuccess = true;
              isBookmarked = data.message.includes('bookmarked') && !data.message.includes('removed');
            } else {
              isSuccess = data.success || response.ok;
              isBookmarked = data.isBookmarked ?? !button.classList.contains('bookmarked');
            }
          } catch (err) {
            console.log('Error parsing response:', err);
            isSuccess = response.ok;
            isBookmarked = !button.classList.contains('bookmarked');
          }

          // Re-enable button
          button.disabled = false;
          
          // If the bookmark toggle operation was successful
          if (isSuccess) {
              // Update the button appearance based on bookmark status
              if (isBookmarked) {
                  button.innerHTML = '<i class="fas fa-bookmark"></i> Bookmarked';
                  button.className = 'bookmarkBtn bookmarked';
              } else {
                  button.innerHTML = '<i class="far fa-bookmark"></i> Bookmark';
                  button.className = 'bookmarkBtn';
              }
              
              // Show a small notification
              showBookmarkNotification(isBookmarked);
          } else {
              button.innerHTML = originalHTML;
              button.className = originalClass;
              
              if (response.status === 401) {
                  alert('Please log in to bookmark items');
                  window.location.href = '/api/v1/user/login';
              } else {
                  console.error('Error updating bookmark:', response.status);
              }
          }
        } catch (error) {
          console.error('Error toggling bookmark:', error);
          const button = document.querySelector(`#bookmarkBtn-${listingId}`);
          if (button) {
            button.disabled = false;
            const isCurrentlyBookmarked = button.classList.contains('bookmarked');
            button.innerHTML = isCurrentlyBookmarked ? 
              '<i class="fas fa-bookmark"></i> Bookmarked' : 
              '<i class="far fa-bookmark"></i> Bookmark';
          }
        }
      });
    });
    
    // Function to show bookmark notification
    function showBookmarkNotification(isBookmarked) {
        const notification = document.createElement('div');
        notification.className = 'bookmark-notification';
        notification.textContent = isBookmarked ? 'Added to bookmarks!' : 'Removed from bookmarks!';
        document.body.appendChild(notification);
        
        // Add notification style if not already present
        if (!document.getElementById('bookmark-notification-style')) {
          const styleElement = document.createElement('style');
          styleElement.id = 'bookmark-notification-style';
          styleElement.textContent = `
            .bookmark-notification {
              position: fixed;
              bottom: 20px;
              right: 20px;
              background: #27ae60;
              color: white;
              padding: 10px 20px;
              border-radius: 4px;
              box-shadow: 0 2px 10px rgba(0,0,0,0.2);
              z-index: 1000;
              animation: slideIn 0.3s forwards;
              transition: opacity 0.5s;
            }
            
            .bookmark-notification.fade-out {
              opacity: 0;
            }
          `;
          document.head.appendChild(styleElement);
        }
        
        // Remove notification after 2 seconds
        setTimeout(() => {
            notification.classList.add('fade-out');
            setTimeout(() => notification.remove(), 500);
        }, 2000);
    }
  </script>
</body>
</html>